# D:/django/stripe_test/stripe_project\cart\cart.py
from decimal import Decimal

from django.conf import settings

from payments.models import Item
from coupons.models import Coupon
from payments.utils.currency import get_exchange_rate


class Cart:
    def __init__(self, request):
        self.session = request.session
        cart = self.session.get(settings.CART_SESSION_ID)
        if not cart:
            cart = self.session[settings.CART_SESSION_ID] = {}
        self.cart = cart
        # сохранить текущий примененный купон
        self.coupon_id = self.session.get("coupon_id")

    def add(self, product, quantity=1, override_quantity=False):
        """
        Добавление товара в корзину или обновление его количества.
        """
        product_id = str(product.id)
        if product_id not in self.cart:
            self.cart[product_id] = {"quantity": 0, "price": str(product.price)}
        if override_quantity:
            self.cart[product_id]["quantity"] = quantity
        else:
            self.cart[product_id]["quantity"] += quantity
        self.save()

    def save(self):
        self.session.modified = True

    def remove(self, product):
        product_id = str(product.id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()

    def __iter__(self):
        """
        Прокрутить товарные позиции корзины в цикле и
        получить товары из базы данных.
        """
        product_ids = self.cart.keys()
        products = Item.objects.filter(id__in=product_ids)
        cart = self.cart.copy()
        for product in products:
            cart[str(product.id)]["product"] = product  # Добавляем обратно в 'cart'
            cart[str(product.id)]["currency"] = product.currency
        for item in cart.values():
            item["price"] = Decimal(item["price"])
            item["total_price"] = item["price"] * item["quantity"]
            yield item

    def __len__(self):
        return sum(item["quantity"] for item in self.cart.values())

    def get_total_price(self):
        total_price_rub = Decimal("0.00")
        total_price_usd = Decimal("0.00")
        exchange_rate = get_exchange_rate()
        for item in self.cart.values():
            if item["currency"] == "rub":
                total_price_rub += item["price"] * item["quantity"]
            elif item["currency"] == "usd":
                total_price_usd += item["price"] * item["quantity"] * exchange_rate
        return Decimal(total_price_rub + total_price_usd).quantize(Decimal("1.00"))

    def clear(self):
        self.session["coupon_id"] = None
        del self.session[settings.CART_SESSION_ID]
        self.save()

    @property
    def coupon(self):
        if self.coupon_id:
            try:
                return Coupon.objects.get(id=self.coupon_id)
            except Coupon.DoesNotExist:
                pass
        return None

    def get_discount(self):
        if self.coupon:
            return (self.coupon.discount / Decimal(100)) * self.get_total_price()
        return Decimal(0)

    def get_total_price_after_discount(self):
        return self.get_total_price() - self.get_discount()


# D:/django/stripe_test/stripe_project\cart\context_processors.py
from cart.cart import Cart


def cart(request):
    return {"cart": Cart(request)}


# D:/django/stripe_test/stripe_project\cart\forms.py
from django import forms

ITEM_QUANTITY_CHOICES = [(i, str(i)) for i in range(1, 21)]


class CartAddItemForm(forms.Form):
    quantity = forms.TypedChoiceField(choices=ITEM_QUANTITY_CHOICES, coerce=int)
    override = forms.BooleanField(
        required=False, initial=False, widget=forms.HiddenInput
    )


# D:/django/stripe_test/stripe_project\cart\models.py


# D:/django/stripe_test/stripe_project\cart\urls.py
from django.urls import path

from cart.views import cart_detail, cart_add, cart_remove

app_name = "cart"

urlpatterns = [
    path("", cart_detail, name="cart_detail"),
    path("add/<int:product_id>/", cart_add, name="cart_add"),
    path("remove/<int:product_id>/", cart_remove, name="cart_remove"),
]


# D:/django/stripe_test/stripe_project\cart\views.py
from django.shortcuts import get_object_or_404, redirect, render
from django.views.decorators.http import require_POST

from cart.cart import Cart
from cart.forms import CartAddItemForm
from payments.models import Item
from payments.service import get_total_price_from_cart
from coupons.forms import CouponApplyForm


@require_POST
def cart_add(request, product_id):
    cart = Cart(request)
    print(f"CARD_ADD -> cart: {vars(cart)}")
    product = get_object_or_404(Item, id=product_id)
    form = CartAddItemForm(request.POST)
    if form.is_valid():
        cd = form.cleaned_data
        cart.add(
            product=product, quantity=cd["quantity"], override_quantity=cd["override"]
        )
    print(f"ADD -> cart: {vars(cart)}")
    return redirect("cart:cart_detail")


@require_POST
def cart_remove(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Item, id=product_id)
    cart.remove(product)
    return redirect("cart:cart_detail")


def cart_detail(request):
    cart = Cart(request)
    total_cost_in_rubles = get_total_price_from_cart(
        cart.cart
    )  # Передаем значения корзины

    for item in cart:
        item["update_quantity_form"] = CartAddItemForm(
            initial={"quantity": item["quantity"], "override": True}
        )
    coupon_apply_form = CouponApplyForm()
    return render(
        request,
        "cart/detail.html",
        {
            "cart": cart,
            "total_cost_in_rubles": total_cost_in_rubles,
            "coupon_apply_form": coupon_apply_form,
        },
    )


# D:/django/stripe_test/stripe_project\cart\templates\cart\detail.html
{% extends "payments/base.html" %}

{% block title %}
 Your shopping cart
{% endblock %}

{% block content %}
  <h1>Your shopping cart</h1>
  {% for item in cart %}
    {% with product=item.product %}
      <a href="{{ item.get_absolute_url }}"></a>
      <p>{{ product.name }}</p>
      <form action="{% url 'cart:cart_add' product.id %}" method="post">
          {{ item.update_quantity_form.quantity }}
          {{ item.update_quantity_form.override }}
          <input type="submit" value="Update">
          {% csrf_token %}
      </form>
      <form action="{% url 'cart:cart_remove' product.id %}" method="post">
          <input type="submit" value="Remove">
          {% csrf_token %}
      </form>
      <p>Unit price: {{ product.currency }} {{ item.price }}</p>
      <p>Price: {{ product.currency }} {{ item.total_price }}</p>
    {% endwith %}
  {% endfor %}

  {% if cart.coupon %}
    <p>₽{{ cart.get_total_price|floatformat:2 }}</p>
    <p>"{{ cart.coupon.code }}" coupon</p>
    <p>({{ cart.coupon.discount }}% off)</p>
    <p>– ₽{{ cart.get_discount|floatformat:2 }}</p>
  {% endif %}

  <p>Total:</p>
    ₽{{ cart.get_total_price_after_discount|floatformat:2 }}

  <p>Apply a coupon:</p>
  <form action="{% url 'coupons:apply' %}" method="post">
      {{ coupon_apply_form }}
      <input type="submit" value="Apply">
      {% csrf_token %}
  </form>

  <p>
     <a href="{% url 'payments:item_list' %}" class="button
     light">Continue shopping</a>
  </p>
  <a href="{% url 'orders:order_create' %}" class="button">
    Checkout
  </a>
{% endblock %}

# D:/django/stripe_test/stripe_project\coupons\forms.py
from django import forms


class CouponApplyForm(forms.Form):
    code = forms.CharField()


# D:/django/stripe_test/stripe_project\coupons\models.py
import stripe
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models


class Coupon(models.Model):
    code = models.CharField(max_length=50, unique=True)
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    discount = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(100)],
        help_text="Percentage value (0 to 100)",
    )
    active = models.BooleanField()

    def __str__(self):
        return self.code


class Tax(models.Model):
    stripe_tax_id = models.CharField(max_length=100, blank=True, null=True, unique=True)
    name = models.CharField(verbose_name="НДС", max_length=100)
    rate = models.DecimalField(
        "Ставка налога (%)",
        max_digits=5,
        decimal_places=2,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
    )

    def __str__(self):
        return f"id:{self.id} {self.name} ({self.rate}%)"

    class Meta:
        verbose_name = "Налог"
        verbose_name_plural = "Налоги"

    def create_stripe_tax_rate(self, jurisdiction="RU"):
        """
        Создаёт налоговую ставку в Stripe и сохраняет её ID.
        """
        if not self.stripe_tax_id:
            tax_rate = stripe.TaxRate.create(
                display_name=self.name,
                description=f"{self.rate}% {self.name}",
                jurisdiction=jurisdiction,
                percentage=float(self.rate),
                inclusive=False,
            )
            self.stripe_tax_id = tax_rate.id
            self.save()
        return self.stripe_tax_id

# D:/django/stripe_test/stripe_project\coupons\urls.py
from django.urls import path

from coupons import views

app_name = "coupons"
urlpatterns = [
    path("apply/", views.coupon_apply, name="apply"),
]


# D:/django/stripe_test/stripe_project\coupons\views.py
from django.shortcuts import redirect
from django.utils import timezone
from django.views.decorators.http import require_POST

from coupons.forms import CouponApplyForm
from coupons.models import Coupon


@require_POST
def coupon_apply(request):
    now = timezone.now()
    form = CouponApplyForm(request.POST)
    if form.is_valid():
        code = form.cleaned_data["code"]
        try:
            coupon = Coupon.objects.get(
                code__iexact=code, valid_from__lte=now, valid_to__gte=now, active=True
            )
            request.session["coupon_id"] = coupon.id
        except Coupon.DoesNotExist:
            request.session["coupon_id"] = None
    return redirect("cart:cart_detail")


# D:/django/stripe_test/stripe_project\orders\forms.py
from django import forms

from orders.models import Order


class OrderCreateForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ["first_name", "last_name", "email", "address", "postal_code", "city"]


# D:/django/stripe_test/stripe_project\orders\models.py
from decimal import Decimal

from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models

from coupons.models import Coupon, Tax
from payments.models import Item
from payments.utils.currency import get_exchange_rate


class Order(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField()
    address = models.CharField(max_length=250)
    postal_code = models.CharField(max_length=20)
    city = models.CharField(max_length=100)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    paid = models.BooleanField(default=False)
    stripe_id = models.CharField(max_length=250, blank=True)
    coupon = models.ForeignKey(
        Coupon, related_name="orders", null=True, blank=True, on_delete=models.SET_NULL
    )
    discount = models.IntegerField(
        default=0, validators=[MinValueValidator(0), MaxValueValidator(100)]
    )
    tax = models.ManyToManyField(Tax, verbose_name="Налог", blank=True)

    class Meta:
        ordering = ["-created"]
        indexes = [
            models.Index(fields=["-created"]),
        ]

    def __str__(self):
        return f"Order {self.id}"

    def get_total_tax(self):
        total_tax = Decimal(0)
        for tax in self.tax.all():
            total_tax += self.get_total_cost_before_discount() * (
                tax.rate / Decimal(100)
            )
        return total_tax

    def get_total_cost(self):
        total_cost = self.get_total_cost_before_discount()
        total_cost -= self.get_discount()
        return total_cost

    def get_stripe_url(self):
        if not self.stripe_id:
            # никаких ассоциированных платежей
            return ""
        if "_test_" in settings.STRIPE_SECRET_KEY:
            # путь Stripe для тестовых платежей
            path = "/test/"
        else:
            # путь Stripe для настоящих платежей
            path = "/"
        return f"https://dashboard.stripe.com{path}payments/{self.stripe_id}"

    def get_total_cost_before_discount(self):
        return sum(item.get_cost() for item in self.items.all())

    def get_discount(self):
        total_cost = self.get_total_cost_before_discount()
        if self.discount:
            return total_cost * (Decimal(self.discount) / Decimal(100))
        return Decimal(0)


class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name="items", on_delete=models.CASCADE)
    item = models.ForeignKey(Item, related_name="order_items", on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.PositiveIntegerField(default=1)
    currency = models.CharField(
        max_length=3,
        default="rub",
    )

    def __str__(self):
        return str(self.id)

    def get_cost(self):
        price = Decimal(self.price)
        quantity = Decimal(self.quantity)
        if self.currency == "rub":
            return (price * quantity).quantize(Decimal("1.00"))
        elif self.currency == "usd":
            return (price * quantity * get_exchange_rate()).quantize(Decimal("1.00"))

    def convert_item_price(self):
        if self.currency == "usd":
            return Decimal(self.price) * get_exchange_rate()
        else:
            return Decimal(self.price)


# D:/django/stripe_test/stripe_project\orders\urls.py
from django.urls import path

from orders.views import order_create

app_name = "orders"
urlpatterns = [
    path("create/", order_create, name="order_create"),
]


# D:/django/stripe_test/stripe_project\orders\views.py
from django.db import transaction
from django.shortcuts import render, redirect
from django.urls import reverse

from cart.cart import Cart
from coupons.models import Tax
from orders.forms import OrderCreateForm
from orders.models import OrderItem


def order_create(request):
    cart = Cart(request)
    if request.method == "POST":
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            with transaction.atomic():
                order = form.save(commit=False)
                if cart.coupon:
                    order.coupon = cart.coupon
                    order.discount = cart.coupon.discount
                order.save()

                tax_rates = Tax.objects.all()
                if tax_rates.exists():
                    order.tax.set(tax_rates)

                for item in cart:
                    OrderItem.objects.create(
                        order=order,
                        item=item["product"],
                        price=item["price"],
                        quantity=item["quantity"],
                        currency=item["currency"],
                    )
                cart.clear()
                request.session["order_id"] = order.id
                return redirect(reverse("payment:buy_order"))
    else:
        form = OrderCreateForm()

    return render(
        request,
        "orders/order/create.html",
        {
            "cart": cart,
            "form": form,
        },
    )


# D:/django/stripe_test/stripe_project\orders\templates\orders\order\create.html
{% extends "payments/base.html" %}

{% block title %}
  Checkout
{% endblock %}

{% block content %}
  <h1>Checkout</h1>
    <h3>Your order</h3>
    <ul>
        {% for item in cart %}
            <li>
                {{ item.quantity }} {{ item.product.name }}:<br>
                {{ item.total_price }} {{ item.product.currency }}
            </li>
        {% endfor %}
        {% if cart.coupon %}
          <li>
            "{{ cart.coupon.code }}" ({{ cart.coupon.discount }}% off)
            - ₽{{ cart.get_discount|floatformat:2 }}
          </li>
        {% endif %}

        {% for tax in order.tax.all %}
            <li>
                {{ tax.name }} ({{ tax.rate }}%):
                - ₽{{ order.get_total_tax|floatformat:2 }}
            </li>
        {% endfor %}

    </ul>
    <p>Total: {{ cart.get_total_price_after_discount|floatformat:2 }} ₽</p>
    <form method="post">
        {{ form.as_p }}
        <p><input type="submit" value="Place order"></p>
        {% csrf_token %}
    </form>
{% endblock %}

# D:/django/stripe_test/stripe_project\orders\templates\orders\order\created.html
{% extends "payments/base.html" %}

{% block title %}
    Thank you
{% endblock %}
{% block content %}
    <h1>Thank you</h1>
    <p>Your order has been successfully completed. Your order number is
    <strong>{{ order.id }}</strong>.</p>
{% endblock %}

# D:/django/stripe_test/stripe_project\payments\models.py
from django.db import models
from django.urls import reverse


class Item(models.Model):
    CURRENCY = (
        ("rub", "RUB"),
        ("usd", "USD"),
    )
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(
        max_length=3,
        choices=CURRENCY,
        default="rub",
    )

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse("payments:item_detail", args=[self.id])


# D:/django/stripe_test/stripe_project\payments\service.py
import os
from datetime import datetime
from decimal import Decimal

import pytz
import requests
import stripe
from bs4 import BeautifulSoup

from payments.models import Item
from payments.utils.currency import get_exchange_rate

stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
stripe_publishable_key = os.getenv("STRIPE_PUBLISHABLE_KEY")


# def get_current_date() -> str:
#     """Получение текущей даты"""
#     timezone = pytz.timezone("Europe/Moscow")
#     get_now_with_tz = timezone.localize(datetime.now())
#     current_date = get_now_with_tz.strftime("%d.%m.%Y")
#     return current_date
#
#
# def exchange_to_rubles() -> Decimal:
#     """Перевод долларов в рубли по курсу"""
#     current_date = get_current_date()
#     url = "http://www.cbr.ru/scripts/XML_daily.asp?"
#     params = {"date_req": current_date}
#     request = requests.get(url, params)
#
#     soup = BeautifulSoup(request.content, "lxml-xml")
#     dollar_rate = soup.find(ID="R01235").Value.string
#     dollar_rate = Decimal(dollar_rate.replace(",", ".")).quantize(Decimal("1.00"))
#     print(f"Курс доллара в рублях: {dollar_rate}")
#     return dollar_rate


def get_total_price_from_cart(cart_items) -> Decimal:
    """Функция для получения общей суммы заказа."""
    total_price_rub, total_price_usd = Decimal("0.00"), Decimal("0.00")
    exchange_rate = get_exchange_rate()

    # Извлекаем идентификаторы товаров из словарей
    item_ids = [
        item_id for item_id in cart_items.keys()
    ]  # Используем ключи (id товаров) из cart_items
    items = Item.objects.filter(id__in=item_ids)  # Получаем объекты товаров по id

    # Создаем словарь для быстрого доступа к товарам по их id
    items_dict = {item.id: item for item in items}

    for item_id, item_data in cart_items.items():
        item_price = Decimal(item_data["price"])
        item_quantity = item_data["quantity"]
        product = items_dict[int(item_id)]  # Получаем товар по его id

        # Проверяем валюту товара
        if product.currency == "rub":
            total_price_rub += item_price * item_quantity
        elif product.currency == "usd":
            total_price_usd += item_price * item_quantity * exchange_rate

    total_price = (total_price_rub + total_price_usd).quantize(Decimal("1.00"))
    print(f"Total price cart: {total_price}")
    return total_price


# D:/django/stripe_test/stripe_project\payments\urls.py
import webhooks
from django.urls import path
from . import webhooks
from .views import (
    buy_item,
    item_detail,
    payment_completed,
    payment_canceled,
    item_list,
    buy_order,
    buy_order_intent,
    process_payment,
)

app_name = "payment"
urlpatterns = [
    path("", item_list, name="item_list"),
    path("item/<int:id>/", item_detail, name="item_detail"),
    path("buy/<int:id>/", buy_item, name="buy_item"),
    path("buy_order/", buy_order, name="buy_order"),
    path("buy_order_intent/", buy_order_intent, name="buy_order_intent"),
    path("process_payment/", process_payment, name="process_payment"),
    path("completed/", payment_completed, name="completed"),
    path("canceled/", payment_canceled, name="canceled"),
    path("payment/webhook/", webhooks.stripe_webhook, name="stripe-webhook"),
]


# D:/django/stripe_test/stripe_project\payments\views.py
import json
import os
from decimal import Decimal

import stripe
from django.conf import settings
from django.http import JsonResponse
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse

from cart.forms import CartAddItemForm
from orders.models import Order
from payments.models import Item

stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
stripe_publishable_key = os.getenv("STRIPE_PUBLISHABLE_KEY")


def buy_item(request, id):
    item = get_object_or_404(Item, id=id)
    success_url = request.build_absolute_uri(reverse("payment:completed"))
    cancel_url = request.build_absolute_uri(reverse("payment:canceled"))
    try:
        session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[
                {
                    "price_data": {
                        "unit_amount": int(item.price * Decimal("100")),
                        "currency": item.currency,
                        "product_data": {
                            "name": item.name,
                        },
                    },
                    "quantity": 1,
                }
            ],
            mode="payment",
            success_url=success_url,
            cancel_url=cancel_url,
        )
        return JsonResponse({"sessionId": session.id})
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)


def buy_order(request):
    order_id = request.session.get("order_id", None)
    order = get_object_or_404(Order, id=order_id)

    if request.method == "POST":
        success_url = request.build_absolute_uri(reverse("payment:completed"))
        cancel_url = request.build_absolute_uri(reverse("payment:canceled"))
        session_data = {
            "mode": "payment",
            "client_reference_id": order.id,
            "success_url": success_url,
            "cancel_url": cancel_url,
            "line_items": [],
        }
        stripe_tax_ids = []
        if order.tax.exists():
            for tax in order.tax.all():
                stripe_tax = stripe.TaxRate.create(
                    display_name=tax.name,
                    inclusive=True,
                    percentage=tax.rate,
                )
                stripe_tax_ids.append(stripe_tax.id)

        # Обрабатываем каждую позицию в заказе
        for order_item in order.items.all():
            item = order_item.item
            price_in_rubles = order_item.convert_item_price()
            session_data["line_items"].append(
                {
                    "price_data": {
                        "unit_amount": int(price_in_rubles * Decimal("100")),
                        "currency": "rub",
                        "product_data": {
                            "name": item.name,
                        },
                    },
                    "quantity": order_item.quantity,
                    "tax_rates": stripe_tax_ids,
                }
            )
        if order.coupon:
            stripe_coupon = stripe.Coupon.create(
                name=order.coupon.code, percent_off=order.discount, duration="once"
            )
            session_data["discounts"] = [{"coupon": stripe_coupon.id}]
        session = stripe.checkout.Session.create(**session_data)
        return JsonResponse({"sessionId": session.id})
    else:
        context = {
            "order": order,
            "stripe_key": stripe_publishable_key,
        }
        return render(request, "payments/item/process.html", context)


def buy_order_intent(request):
    order_id = request.session.get("order_id", None)
    order = get_object_or_404(Order, id=order_id)

    if request.method == "POST":
        total_amount = int(order.get_total_cost() * Decimal("100"))

        stripe_tax_ids = []
        if order.tax.exists():
            for tax in order.tax.all():
                stripe_tax = stripe.TaxRate.create(
                    display_name=tax.name,
                    inclusive=True,
                    percentage=tax.rate,
                )
                stripe_tax_ids.append(stripe_tax.id)

        items_data = []
        for order_item in order.items.all():
            item = order_item.item
            price_in_rubles = order_item.convert_item_price()
            items_data.append(
                {
                    "price_data": {
                        "unit_amount": int(price_in_rubles * Decimal("100")),
                        "currency": "rub",
                        "product_data": {
                            "name": item.name,
                        },
                    },
                    "quantity": order_item.quantity,
                    "tax_rates": stripe_tax_ids,
                }
            )

        intent = stripe.PaymentIntent.create(
            amount=total_amount,
            currency="rub",
            metadata={
                "order_id": order.id,
                "order_items": json.dumps(items_data),
            },
        )
        return JsonResponse({"clientSecret": intent.client_secret})
    else:
        context = {
            "order": order,
            "stripe_key": stripe_publishable_key,
        }
        return render(request, "payments/item/process.html", context)


def process_payment(request):
    client_secret = request.GET.get("clientSecret", None)
    if not client_secret:
        return redirect("payment:canceled")  # Или другой обработчик ошибок

    order_id = request.session.get("order_id", None)
    order = get_object_or_404(Order, id=order_id)

    completed_url = request.build_absolute_uri(reverse("payment:completed"))

    context = {
        "client_secret": client_secret,
        "order": order,
        "stripe_key": stripe_publishable_key,
        "completed_url": completed_url,
    }
    return render(request, "payments/item/process_payment.html", context)


def item_list(request):
    items = Item.objects.all()
    context = {"items": items}
    return render(request, "payments/item/item_list.html", context)


def item_detail(request, id):
    item = get_object_or_404(Item, id=id)
    cart_item_form = CartAddItemForm()
    context = {
        "item": item,
        "cart_item_form": cart_item_form,
        "stripe_publishable_key": stripe_publishable_key,
    }
    return render(request, "payments/item/item_detail.html", context)


def payment_completed(request):
    return render(request, "payments/completed.html")


def payment_canceled(request):
    return render(request, "payments/canceled.html")


# D:/django/stripe_test/stripe_project\payments\webhooks.py
import stripe
from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from orders.models import Order


@csrf_exempt
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META["HTTP_STRIPE_SIGNATURE"]
    event = None
    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET
        )
    except ValueError as e:
        # Недопустимая полезная нагрузка
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        # Недопустимая подпись
        return HttpResponse(status=400)

    if event.type == "checkout.session.completed":
        session = event.data.object
        print(f"WEBHOOK EVENT:{session}")
        if session.mode == "payment" and session.payment_status == "paid":
            try:
                order = Order.objects.get(id=session.client_reference_id)
                print(f"Order found: {order}")
            except Order.DoesNotExist:
                return HttpResponse(status=404)
            # пометить заказ как оплаченный
            order.paid = True
            # сохранить ИД платежа Stripe
            order.stripe_id = session.payment_intent
            order.save()
            print(f"Order {order.id} marked as paid.")
    return HttpResponse(status=200)


# D:/django/stripe_test/stripe_project\payments\api\serializers.py
from rest_framework.serializers import ModelSerializer

from orders.models import Order, OrderItem
from payments.models import Item


class ItemSerializer(ModelSerializer):
    class Meta:
        model = Item
        fields = ("name", "description", "price", "currency")


class OrderItemSerializer(ModelSerializer):
    class Meta:
        model = OrderItem
        fields = "__all__"


class OrderSerializer(ModelSerializer):
    items = OrderItemSerializer(many=True, required=False)

    class Meta:
        model = Order
        fields = "__all__"

    def create(self, validated_data):
        items_data = validated_data.pop("items", [])
        order = Order.objects.create(**validated_data)
        for item_data in items_data:
            OrderItem.objects.create(order=order, **item_data)
        return order

    def update(self, instance, validated_data):
        items_data = validated_data.pop("items", [])
        # Обновление полей заказа
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        # Обновление или создание связанных элементов заказа
        for item_data in items_data:
            item_id = item_data.get("id")
            if item_id:  # Существующий элемент заказа
                item = OrderItem.objects.get(id=item_id, order=instance)
                for attr, value in item_data.items():
                    setattr(item, attr, value)
                item.save()
            else:  # Новый элемент заказа
                OrderItem.objects.create(order=instance, **item_data)

        return instance


# D:/django/stripe_test/stripe_project\payments\api\urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter

from payments.api.view import ItemViewSet

router = DefaultRouter()
router.register(r"item", ItemViewSet, basename="items")

urlpatterns = [
    path("", include(router.urls)),
]


# D:/django/stripe_test/stripe_project\payments\api\view.py
from rest_framework.viewsets import ModelViewSet

from payments.api.serializers import ItemSerializer
from payments.models import Item


class ItemViewSet(ModelViewSet):
    queryset = Item.objects.all()
    serializer_class = ItemSerializer


# D:/django/stripe_test/stripe_project\payments\templates\payments\base.html
<!DOCTYPE html>
<html>
 <head>
     <meta charset="utf-8" />
     <title>{% block title %}My shop{% endblock %}</title>
 </head>
  <body>
    <div id="header">
       <a href="/" class="logo">My shop</a>
    </div>
    <div class="cart">
        {% with total_items=cart|length %}
          {% if total_items > 0 %}
            {% for item in cart %}
            {% endfor %}
            Your cart:
            <a href="{% url 'cart:cart_detail' %}">
                {{ total_items }} item{{ total_items|pluralize }},
                {{ cart.get_total_price }} RUB
            </a>
          {% elif not order %}
            Your cart is empty.
          {% endif %}
        {% endwith %}
    </div>
    <div id="content">
        {% block content %}
        {% endblock %}
        {% block extra_js %}
        {% endblock %}
    </div>
  </body>
</html>

# D:/django/stripe_test/stripe_project\payments\templates\payments\canceled.html
<h1>Your payment has not been processed</h1>
<p>There was a problem processing your payment.</p>
<a href="{% url 'payment:item_list' %}"
  class="btn btn-primary"
  title="Вернуться на главную">
  На главную
</a>

# D:/django/stripe_test/stripe_project\payments\templates\payments\completed.html
<h1>Your payment was successful</h1>
<p>Your payment has been processed successfully.</p>
<a href="{% url 'payment:item_list' %}"
  class="btn btn-primary"
  title="Вернуться на главную">
  На главную
</a>

# D:/django/stripe_test/stripe_project\payments\templates\payments\item\item_detail.html
{% extends "payments/base.html" %}
{% block title %}
 {{ item.name }}
{% endblock %}
{% block content %}
    <h1>{{ item.name }}</h1>
    <p>{{ item.description|linebreaks }}</p>
    <p>Price: {{ item.price }} {{ item.currency }}</p>
    <button id="buy-button">Buy</button>
    <form action="{% url 'cart:cart_add' item.id %}" method="post">
        {{ cart_item_form }}
        {% csrf_token %}
        <input type="submit" value="Add to cart">
    </form>

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe = Stripe('{{ stripe_publishable_key }}');

        document.getElementById('buy-button').addEventListener('click', function () {
            fetch('/buy/{{ item.id }}')
            .then(response => response.json())
            .then(data => {
                return stripe.redirectToCheckout({ sessionId: data.sessionId });
            })
            .then(result => {
                if (result.error) {
                    alert(result.error.message);
                }
            })
            .catch(error => console.error('Error:', error));
        });
    </script>
{% endblock %}

# D:/django/stripe_test/stripe_project\payments\templates\payments\item\item_list.html
{% extends "payments/base.html" %}

{% block title %}Items{% endblock %}

{% block content %}
    <div id="main" class="item-list">
        <h1>Items</h1>
        {% for item in items %}
            <div class="item">
                <a href="{{ item.get_absolute_url }}">{{ item.name }}</a>
                <br>
                {{ item.price }} {{ item.currency }}
            </div>
        {% endfor %}
    </div>
{% endblock %}


# D:/django/stripe_test/stripe_project\payments\templates\payments\item\process.html
{% extends "payments/base.html" %}

{% block title %}Pay your order{% endblock %}

{% block content %}
  <h1>Order summary</h1>
  <ul>
    {% for item in order.items.all %}
      <li>
        <p>Product: {{ item.item.name }}</p>
        <p>Price: {{ item.price }} {{ item.item.currency }}</p>
        <p>Quantity: {{ item.quantity }}</p>
        <p>Total: {{ item.get_cost }} ₽</p>
      </li>
    {% endfor %}
  </ul>
    {% if order.tax.exists %}
          <p><b>Taxes:</b></p>
            <p>{% for tax in order.tax.all %}
               {{ tax.name }} ({{ tax.rate }}%): ₽{{ order.get_total_tax|floatformat:2 }}
               {% endfor %}</p>
      {% endif %}

      {% if order.coupon %}
          <p><b>Discount:</b></p>
            <p>"{{ order.coupon.code }}" coupon
               ({{ order.discount }}% off)
               – ₽{{ order.get_discount|floatformat:2 }}</p>
      {% endif %}

  <b>Overall:</b> {{ order.get_total_cost|floatformat:2 }} ₽

  <div style="display: flex; flex-direction: column; gap: 10px; align-items: flex-start;">
  <button id="pay-now" data-action="buy_order">Pay now</button>
  <button id="pay-now-intent" data-action="buy_order_intent">Pay now with PaymentIntent</button>
  </div>

  <div id="error-message" style="color: red; margin-top: 10px;"></div>
{% endblock %}

{% block extra_js %}
<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const stripe = Stripe('{{ stripe_key }}');

    document.getElementById('pay-now').addEventListener('click', function () {
      fetch("{% url 'payment:buy_order' %}", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": "{{ csrf_token }}",
        },
        body: JSON.stringify({}),
      })
      .then(response => response.json())
      .then(data => {
        if (data.sessionId) {
          stripe.redirectToCheckout({ sessionId: data.sessionId })
            .then(function (result) {
              if (result.error) {
                document.getElementById('error-message').textContent = result.error.message;
              }
            });
        } else {
          document.getElementById('error-message').textContent = data.error || "An error occurred.";
        }
      })
      .catch(error => {
        console.error("Error:", error);
        document.getElementById('error-message').textContent = "An error occurred.";
      });
    });

    document.getElementById('pay-now-intent').addEventListener('click', function () {
      fetch("{% url 'payment:buy_order_intent' %}", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": "{{ csrf_token }}",
        },
        body: JSON.stringify({}),
      })
      .then(response => response.json())
      .then(data => {
        if (data.clientSecret) {
          window.location.href = "{% url 'payment:process_payment' %}?clientSecret=" + data.clientSecret;
        } else {
          document.getElementById('error-message').textContent = data.error || "An error occurred.";
        }
      })
      .catch(error => {
        console.error("Error:", error);
        document.getElementById('error-message').textContent = "An error occurred.";
      });
    });
  });
</script>
{% endblock %}

# D:/django/stripe_test/stripe_project\payments\templates\payments\item\process_payment.html
{% extends "payments/base.html" %}

{% block title %}Checkout{% endblock %}

{% block content %}
<div class="order-summary" style="background-color: #1a1a1a; padding: 20px; color: #ffffff;">
  <h1>Order summary</h1>
  <ul>
    {% for item in order.items.all %}
      <li>
        <p>Product: {{ item.item.name }}</p>
        <p>Price: {{ item.price }} {{ item.item.currency }}</p>
        <p>Quantity: {{ item.quantity }}</p>
        <p>Total: {{ item.get_cost }} ₽</p>
      </li>
    {% endfor %}
  </ul>
  {% if order.coupon %}
    <p><b>Discount:</b> "{{ order.coupon.code }}" ({{ order.discount }}% off) – ₽{{ order.get_discount|floatformat:2 }}</p>
  {% endif %}
  {% if order.tax.exists %}
    <p><b>Taxes:</b></p>
    <ul>
      {% for tax in order.tax.all %}
        <li>{{ tax.name }} ({{ tax.rate }}%): ₽{{ order.get_total_tax|floatformat:2 }}</li>
      {% endfor %}
    </ul>
  {% endif %}
  <b>Overall:</b> {{ order.get_total_cost|floatformat:2 }} ₽
</div>
<form id="payment-form">
  <div id="payment-element">
    <!-- Elements will create form elements here -->
  </div>
  <button id="submit">Buy</button>
  <div id="payment-message" class="hidden">
    <p id="error-message"></p>
  </div>
  {% csrf_token %}
</form>
{% endblock %}

{% block extra_js %}
<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const clientSecret = new URLSearchParams(window.location.search).get('clientSecret');
    const stripe = Stripe('{{ stripe_key }}');

    const options = {
        clientSecret: clientSecret,
        appearance: {
          theme: 'night',
        },
      };

    const elements = stripe.elements(options);
    const paymentElement = elements.create('payment');
    paymentElement.mount('#payment-element');

    const form = document.getElementById('payment-form');
    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const { error } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: "{{ completed_url }}",
        },
      });

      if (error) {
        const messageContainer = document.querySelector('#error-message');
        messageContainer.textContent = error.message;
      } else {
        console.log('Redirecting to Stripe Checkout...');
      }
    });
  });
</script>
{% endblock %}


# D:/django/stripe_test/stripe_project\payments\utils\currency.py
import logging
from datetime import datetime
from decimal import Decimal

import pytz
import requests
from bs4 import BeautifulSoup
from django.conf import settings
from django.core.cache import cache

logger = logging.getLogger(__name__)

def get_current_date() -> str:
    timezone = pytz.timezone("Europe/Moscow")
    get_now_with_tz = timezone.localize(datetime.now())
    current_date = get_now_with_tz.strftime("%d.%m.%Y")
    return current_date


def fetch_exchange_rate() -> Decimal:
    """Запрос курса доллара к рублю с ЦБ РФ"""
    current_date = get_current_date()
    url = "http://www.cbr.ru/scripts/XML_daily.asp"
    params = {"date_req": current_date}
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "lxml-xml")
        usd_tag = soup.find("Valute", ID="R01235")
        if not usd_tag:
            raise ValueError("Курс доллара не найден на странице ЦБ РФ.")
        value = usd_tag.find("Value").text
        dollar_rate = Decimal(value.replace(",", ".")).quantize(Decimal("1.00"))
        logger.info(f"Курс доллара успешно получен: {dollar_rate} RUB")
        return dollar_rate
    except Exception as e:
        logger.error(f"Ошибка при получении курса валют: {e}")
        raise RuntimeError("Не удалось получить курс валют.")


def get_exchange_rate() -> Decimal:
    """
    Получение курса доллара к рублю с кэшированием.
    Кэширует курс на 24 часа.
    """
    cache_key = "usd_to_rub_rate"
    exchange_rate = cache.get(cache_key)
    if exchange_rate is None:
        exchange_rate = fetch_exchange_rate()
        cache.set(cache_key, exchange_rate, timeout=settings.CACHE_TTL)
    return exchange_rate


# D:/django/stripe_test/stripe_project\stripe_project\settings.py
import os
from pathlib import Path

from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

SECRET_KEY = os.getenv("SECRET_KEY")

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    "payments.apps.PaymentsConfig",
    "cart.apps.CartConfig",
    "orders.apps.OrdersConfig",
    "coupons.apps.CouponsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "stripe_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cart.context_processors.cart",
            ],
        },
    },
]

WSGI_APPLICATION = "stripe_project.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# время по умолчанию для кэша
CACHE_TTL = 60 * 60 * 24  # 24 часа

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATIC_URL = "static/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")
CART_SESSION_ID = "cart"
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Включает существующие логгеры
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "debug.log",  # Имя файла для логов
            "formatter": "verbose",
        },
    },
    "loggers": {
        "payments.utils.currency": {  # Логгер для модуля
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # Другие логгеры...
    },
}


# D:/django/stripe_test/stripe_project\stripe_project\urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("cart/", include("cart.urls", namespace="cart")),
    path("orders/", include("orders.urls", namespace="orders")),
    path("coupons/", include("coupons.urls", namespace="coupons")),
    path("", include("payments.urls", namespace="payments")),
    path("api/", include("payments.api.urls")),
]


